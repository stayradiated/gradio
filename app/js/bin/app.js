// Generated by CoffeeScript 1.6.3
(function() {
  var $, Base, Core, Methods, Player, Ranger, Search, Server;

  Base = require('base');

  Ranger = require('ranger');

  $ = require('jqueryify');

  if (global.NODEJS) {
    Core = require('../../../bin/core');
    Methods = require('../../../bin/methods');
    Server = require('../../../bin/server');
    Player = require('./player');
    Search = require('./search');
  } else {
    global.Client = require('./client.coffee');
    Player = require('./player.coffee');
    Search = require('./search.coffee');
  }

  module.exports.init = function() {
    var app, core, openItem, player, ranger, search, server;
    if (global.NODEJS) {
      core = new Core();
      app = new Methods(core);
      core.init();
      server = new Server(core);
      server.listen(global.port);
    } else {
      app = new Client();
    }
    search = new Search({
      el: $('header.panel')
    });
    player = new Player({
      el: $('nav.controls')
    });
    global.ranger = ranger = new Ranger({
      el: $('section.columns')
    });
    search.on('playlist', function(id) {
      var _this = this;
      return app.getPlaylistSongs(id).then(function(response) {
        console.log(response.Songs);
        return ranger.loadRaw(response.Songs, [['Artist', 'ArtistName'], ['Songs', 'Name']]);
      });
    });
    search.on('search', function(query) {
      var _this = this;
      return app.getSearchResults(query, 'Songs').then(function(response) {
        return ranger.loadRaw(response.result, [['Artist', 'ArtistName'], ['Songs', 'SongName']]);
      });
    });
    openItem = function() {
      var song, url;
      song = ranger.open();
      if (!song) {
        return;
      }
      url = "http://" + global.server + ":" + global.port + "/song/" + song.SongID + ".mp3";
      return player.setSource(url);
    };
    $(document).on('keydown', function(e) {
      var _ref;
      switch (e.which) {
        case 13:
          console.log(global.focus);
          if (global.focus) {
            return;
          }
          openItem();
          break;
        case 32:
          if (global.focus) {
            return;
          }
          player.toggle();
          break;
        case 38:
          ranger.up();
          break;
        case 37:
          ranger.left();
          break;
        case 39:
          ranger.right();
          break;
        case 40:
          ranger.down();
      }
      if ((37 <= (_ref = e.which) && _ref <= 40)) {
        e.preventDefault();
        return false;
      }
    });
    global.focus = false;
    return $('input').each(function() {
      this.addEventListener('focus', function() {
        console.log('focus');
        return global.focus = true;
      });
      return this.addEventListener('blur', function() {
        console.log('blur');
        return global.focus = false;
      });
    });
  };

}).call(this);
