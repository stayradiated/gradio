// Generated by CoffeeScript 1.6.3
(function() {
  var $, Base, Player, Track,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = require('jqueryify');

  Base = require('base');

  Track = require('./track.coffee');

  Player = (function(_super) {
    __extends(Player, _super);

    Player.prototype.events = {
      'click .prev': 'prev',
      'click .next': 'next',
      'click .play-pause': 'toggle'
    };

    Player.prototype.elements = {
      '.track': 'track',
      '.now-playing': 'nowPlaying'
    };

    Player.prototype.audioEvents = {
      'durationchange': 'setDuration',
      'progress': 'showBufferProgress',
      'timeupdate': 'showCurrentProgress'
    };

    function Player() {
      this.setDuration = __bind(this.setDuration, this);
      this.setSource = __bind(this.setSource, this);
      this.setSong = __bind(this.setSong, this);
      this.setVolume = __bind(this.setVolume, this);
      this.showCurrentProgress = __bind(this.showCurrentProgress, this);
      this.showBufferProgress = __bind(this.showBufferProgress, this);
      this._percent = __bind(this._percent, this);
      this.next = __bind(this.next, this);
      this.prev = __bind(this.prev, this);
      this.toggle = __bind(this.toggle, this);
      var event, method, _ref;
      Player.__super__.constructor.apply(this, arguments);
      this.audio = $('<audio>');
      this.audio.attr({
        autoplay: true,
        preload: 'auto',
        controls: true
      });
      $('body').append(this.context);
      this.context = this.audio.get(0);
      global.track = this.track = new Track({
        el: this.track
      });
      _ref = this.audioEvents;
      for (event in _ref) {
        method = _ref[event];
        this.context.addEventListener(event, this[method]);
      }
    }

    Player.prototype.toggle = function() {
      if (this.context.paused) {
        return this.context.play();
      } else {
        return this.context.pause();
      }
    };

    Player.prototype.prev = function() {
      return this.context.currentTime = 0;
    };

    Player.prototype.next = function() {
      return this.context.currentTime += 10;
    };

    Player.prototype._percent = function(x) {
      return x / this.duration * 100;
    };

    Player.prototype.showBufferProgress = function() {
      var percent;
      if (this.context.buffered.length > 0) {
        percent = this._percent(this.context.buffered.end(0));
        return this.track.setBuffer(percent);
      }
    };

    Player.prototype.showCurrentProgress = function() {
      var percent;
      percent = this._percent(this.context.currentTime);
      return this.track.setPlaying(percent);
    };

    Player.prototype.setVolume = function(volume) {
      return this.context.volume = volume;
    };

    Player.prototype.setSong = function(song) {
      var url;
      this.nowPlaying.html("" + song.ArtistName + " - " + song.SongName);
      url = "http://" + global.server + ":" + global.port + "/song/" + song.SongID + ".mp3";
      return this.setSource(url);
    };

    Player.prototype.setSource = function(url) {
      return this.context.src = url;
    };

    Player.prototype.setDuration = function() {
      return this.duration = this.context.duration;
    };

    return Player;

  })(Base.Controller);

  module.exports = Player;

}).call(this);
