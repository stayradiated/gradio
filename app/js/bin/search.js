// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Search,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  Search = (function(_super) {
    __extends(Search, _super);

    Search.prototype.elements = {
      '.search': 'input'
    };

    Search.prototype.events = {
      'keydown .search': 'open'
    };

    function Search() {
      this.open = __bind(this.open, this);
      Search.__super__.constructor.apply(this, arguments);
    }

    Search.prototype.open = function(e) {
      var query;
      if (e.which !== 13) {
        return true;
      }
      query = this.input.val();
      if (!isNaN(parseInt(query))) {
        this.trigger('playlist', query);
      } else {
        this.trigger('search', query);
      }
      return true;
    };

    return Search;

  })(Base.Controller);

  module.exports = Search;

}).call(this);
