// Generated by CoffeeScript 1.6.2
(function() {
  var $, Player,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('./dom');

  Player = (function() {
    Player.prototype.events = {
      audio: {
        'durationchange': 'setDuration',
        'progress': 'showBufferProgress',
        'timeupdate': 'showCurrentProgress'
      },
      dom: {
        'click .prev': 'prev',
        'click .next': 'next',
        'click .play-pause': 'toggle'
      },
      keydown: {
        '32': 'toggle'
      }
    };

    function Player(el) {
      var ev, event, method, str, _ref, _ref1, _ref2,
        _this = this;

      this.el = el;
      this.setDuration = __bind(this.setDuration, this);
      this.setSource = __bind(this.setSource, this);
      this.setVolume = __bind(this.setVolume, this);
      this.showCurrentProgress = __bind(this.showCurrentProgress, this);
      this.showBufferProgress = __bind(this.showBufferProgress, this);
      this._percent = __bind(this._percent, this);
      this.next = __bind(this.next, this);
      this.prev = __bind(this.prev, this);
      this.toggle = __bind(this.toggle, this);
      this.context = document.createElement('audio');
      this.context.setAttribute('autoplay', true);
      this.context.setAttribute('preload', 'auto');
      this.context.setAttribute('controls', true);
      document.body.appendChild(this.context);
      this.range = {
        track: $.find(this.el, '.track'),
        buffer: $.find(this.el, '.buffer')
      };
      _ref = this.events.audio;
      for (event in _ref) {
        method = _ref[event];
        this.context.addEventListener(event, this[method]);
      }
      _ref1 = this.events.dom;
      for (str in _ref1) {
        method = _ref1[str];
        _ref2 = str.match(/^(\w+) (.+)$/), str = _ref2[0], ev = _ref2[1], el = _ref2[2];
        $.find(this.el, el).addEventListener(ev, this[method]);
      }
      document.addEventListener('keydown', function(e) {
        var keyCode, _ref3;

        if (global.focus) {
          return true;
        }
        _ref3 = _this.events.keydown;
        for (keyCode in _ref3) {
          method = _ref3[keyCode];
          if (e.keyCode.toString() === keyCode) {
            _this[method]();
          }
        }
        return true;
      });
    }

    Player.prototype.toggle = function() {
      if (this.context.paused) {
        return this.context.play();
      } else {
        return this.context.pause();
      }
    };

    Player.prototype.prev = function() {
      return this.context.currentTime = 0;
    };

    Player.prototype.next = function() {
      return this.context.currentTime += 10;
    };

    Player.prototype._percent = function(x) {
      return x / this.duration * 100;
    };

    Player.prototype.showBufferProgress = function() {
      var percent;

      if (this.context.buffered.length > 0) {
        percent = this._percent(this.context.buffered.end(0));
        return this.range.buffer.style.width = percent + '%';
      }
    };

    Player.prototype.showCurrentProgress = function() {
      var percent;

      percent = this._percent(this.context.currentTime);
      return this.range.track.style.width = percent + '%';
    };

    Player.prototype.setVolume = function(volume) {
      return this.context.volume = volume;
    };

    Player.prototype.setSource = function(url) {
      return this.context.src = url;
    };

    Player.prototype.setDuration = function() {
      console.log('> Setting duration');
      return this.duration = this.context.duration;
    };

    return Player;

  })();

  module.exports = Player;

}).call(this);
