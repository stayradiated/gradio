// Generated by CoffeeScript 1.6.2
(function() {
  var $, Item, ItemView, Items, Pane, PaneView, Panes, Ranger, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  global.document = document;

  $ = require('./js/dom');

  /**
   * Items
  */


  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      _ref = Item.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Item.prototype.defaults = {
      name: 'Item'
    };

    return Item;

  })(Backbone.Model);

  Items = (function(_super) {
    __extends(Items, _super);

    function Items() {
      _ref1 = Items.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Items.prototype.model = Item;

    Items.prototype.active = false;

    return Items;

  })(Backbone.Collection);

  /**
   * Panes
  */


  Pane = (function(_super) {
    __extends(Pane, _super);

    function Pane() {
      _ref2 = Pane.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Pane.prototype.defaults = {
      title: 'Pane Title',
      items: new Items()
    };

    Pane.prototype.up = function() {
      return this.move(-1);
    };

    Pane.prototype.down = function() {
      return this.move(1);
    };

    Pane.prototype.move = function(direction) {
      var active, length;

      active = this.get('items').active;
      length = this.get('items').length;
      if (length < 0) {
        return false;
      } else if (active === false) {
        active = 0;
      }
      active += direction;
      if (active < 0) {
        active = 0;
      } else if (active > length - 1) {
        active = length;
      }
      return this.items.set('active', active);
    };

    return Pane;

  })(Backbone.Model);

  Panes = (function(_super) {
    __extends(Panes, _super);

    function Panes() {
      _ref3 = Panes.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Panes.prototype.model = Pane;

    Panes.prototype.active = false;

    return Panes;

  })(Backbone.Collection);

  /**
   * VIEWS
  */


  ItemView = (function(_super) {
    __extends(ItemView, _super);

    function ItemView() {
      _ref4 = ItemView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ItemView.prototype.tagName = 'div';

    ItemView.prototype.className = 'item';

    ItemView.prototype.template = _.template($.id('item-template').innerHTML);

    ItemView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.bind('update', this.render);
    };

    ItemView.prototype.render = function() {
      this.el.innerHTML = this.template(this);
      return el;
    };

    return ItemView;

  })(Backbone.View);

  PaneView = (function(_super) {
    __extends(PaneView, _super);

    function PaneView() {
      _ref5 = PaneView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    PaneView.prototype.tagName = 'section';

    PaneView.prototype.className = 'pane';

    PaneView.prototype.template = _.template($.id('pane-template').innerHTML);

    PaneView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.get('items').bind('add', this.addItem);
    };

    PaneView.prototype.render = function() {
      this.el.innerHTML = this.template(this);
      return this.el;
    };

    PaneView.prototype.addItem = function(item) {
      var itemView;

      itemView = new ItemView({
        model: item
      });
      return this.$el.append(itemView.render());
    };

    return PaneView;

  })(Backbone.View);

  Ranger = (function(_super) {
    __extends(Ranger, _super);

    function Ranger() {
      _ref6 = Ranger.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Ranger.prototype.el = $["class"]('ranger')[0];

    Ranger.prototype.initialize = function() {
      _.bindAll(this);
      this.panes = new Panes();
      return this.panes.bind('add', this.addPane);
    };

    Ranger.prototype.addPane = function(pane) {
      var paneView;

      paneView = new PaneView({
        model: pane
      });
      return this.$el.append(paneView.render());
    };

    return Ranger;

  })(Backbone.View);

  window.ranger = new Ranger();

}).call(this);
