// Generated by CoffeeScript 1.6.2
(function() {
  var $, Pane, Ranger, el, panes,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  global.document = document;

  $ = require('./js/dom');

  /**
   * @class  Pane
  */


  Pane = (function() {
    function Pane(el, items) {
      this.el = el;
      this.items = items;
      this.move = __bind(this.move, this);
      this.down = __bind(this.down, this);
      this.up = __bind(this.up, this);
      this.active = 0;
    }

    Pane.prototype.render = function() {
      var className, content, html, i, _i, _len, _ref;

      html = '';
      _ref = this.items;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        content = _ref[i];
        className = this.active === i ? 'item active' : 'item';
        html += "<div class=\"" + className + "\">" + content + "</div>";
      }
      this.el.innerHTML = html;
      return html;
    };

    Pane.prototype.up = function() {
      return this.move(-1);
    };

    Pane.prototype.down = function() {
      return this.move(1);
    };

    Pane.prototype.move = function(direction) {
      this.active += direction;
      if (this.active < 0) {
        this.active = 0;
      } else if (this.active > this.items.length - 1) {
        this.active = this.items.length - 1;
      }
      return this.render();
    };

    return Pane;

  })();

  /**
   * @class Ranger
  */


  Ranger = (function() {
    function Ranger(el, data) {
      var pane, _i, _len;

      this.el = el;
      this.down = __bind(this.down, this);
      this.up = __bind(this.up, this);
      this.active = 0;
      this.index = 0;
      this.panes = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        pane = data[_i];
        this.addPane(pane);
      }
    }

    Ranger.prototype.render = function() {
      var className, html, i, pane, _i, _len, _ref;

      html = '';
      _ref = this.panes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        pane = _ref[i];
        className = this.active === i ? 'pane active' : 'pane';
        html += ("<section class=\"" + className + "\">") + pane.render() + '</section>';
      }
      this.el.innerHTML = html;
      return html;
    };

    Ranger.prototype.setActive = function(id) {
      var active;

      this.active = id;
      active = $.find(this.el, '.active.pane');
      if (active != null) {
        $.removeClass(active, 'active');
      }
      active = this.panes[id].el;
      return $.addClass(active, 'active');
    };

    Ranger.prototype.getActive = function() {
      return this.panes[this.active];
    };

    Ranger.prototype.addPane = function(pane) {
      var el, id;

      el = $.create('div');
      $.addClass(el, 'pane');
      pane = new Pane(el, pane);
      id = this.panes.push(pane);
      id -= 1;
      pane.render();
      $.append(el, this.el);
      this.setActive(id);
      return id;
    };

    Ranger.prototype.removePane = function(id) {
      if (id === 0) {
        return 0;
      }
      this.panes.slice(id, 1);
      id--;
      this.setActive(id);
      return id;
    };

    Ranger.prototype.left = function() {
      return this.move(-1);
    };

    Ranger.prototype.right = function() {
      return this.move(1);
    };

    Ranger.prototype.up = function() {
      return this.getActive().up();
    };

    Ranger.prototype.down = function() {
      return this.getActive().down();
    };

    Ranger.prototype.move = function(direction) {
      this.active += direction;
      if (this.active < 0) {
        this.active = 0;
      } else if (this.active > this.panes.length - 1) {
        this.active = this.panes.length - 1;
      }
      return this.setActive(this.active);
    };

    return Ranger;

  })();

  panes = [['Item: 1', 'Item: 2', 'Item: 3', 'Item: 4', 'Item: 5'], ['Item: 1', 'Item: 2', 'Item: 3', 'Item: 4', 'Item: 5'], ['Item: 1', 'Item: 2', 'Item: 3', 'Item: 4', 'Item: 5']];

  el = $('.ranger');

  window.ranger = new Ranger(el, panes);

  document.onkeydown = function(e) {
    switch (e.which) {
      case 37:
        return ranger.left();
      case 38:
        return ranger.up();
      case 39:
        return ranger.right();
      case 40:
        return ranger.down();
      default:
        return console.log(e.which);
    }
  };

}).call(this);
