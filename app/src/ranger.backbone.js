// Generated by CoffeeScript 1.6.2
var $, Item, ItemView, Items, Pane, PaneView, Panes, Ranger, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global.document = document;

$ = require('./js/dom');

/**
 * Items
*/


Item = (function(_super) {
  __extends(Item, _super);

  function Item() {
    _ref = Item.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Item.prototype.defaults = {
    name: 'Item',
    pane: false
  };

  return Item;

})(Backbone.Model);

Items = (function(_super) {
  __extends(Items, _super);

  function Items() {
    _ref1 = Items.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Items.prototype.model = Item;

  Items.prototype.active = false;

  Items.prototype.position = false;

  Items.prototype.setActive = function(id) {
    console.log('> Setting active', id);
    this.position = id;
    if (this.active !== false) {
      this.active.trigger('change:active', false);
    }
    this.active = this.at(id);
    return this.active.trigger('change:active', true);
  };

  return Items;

})(Backbone.Collection);

/**
 * Panes
*/


Pane = (function(_super) {
  __extends(Pane, _super);

  function Pane() {
    _ref2 = Pane.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  Pane.prototype.defaults = {
    title: 'Pane Title',
    items: []
  };

  Pane.prototype.initialize = function(data, options) {
    var item, items, _i, _len, _ref3, _results;

    console.log('> Creating a new Pane');
    items = new Items();
    this.items.bind('select:pane', function() {
      return console.log('Selected pane');
    });
    this.set('items', items);
    if (data.items != null) {
      _ref3 = data.items;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        item = _ref3[_i];
        _results.push(items.add(item));
      }
      return _results;
    }
  };

  Pane.prototype.up = function() {
    return this.move(-1);
  };

  Pane.prototype.down = function() {
    return this.move(1);
  };

  Pane.prototype.move = function(direction) {
    var active, length;

    active = this.get('items').position;
    length = this.get('items').length;
    if (length < 0) {
      return false;
    } else if (active === false) {
      active = 0;
    }
    active += direction;
    if (active < 0) {
      active = 0;
    } else if (active > length - 1) {
      active = length - 1;
    }
    return this.get('items').setActive(active);
  };

  return Pane;

})(Backbone.Model);

Panes = (function(_super) {
  __extends(Panes, _super);

  function Panes() {
    _ref3 = Panes.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  Panes.prototype.model = Pane;

  Panes.prototype.active = false;

  return Panes;

})(Backbone.Collection);

/**
 * VIEWS
*/


ItemView = (function(_super) {
  __extends(ItemView, _super);

  function ItemView() {
    _ref4 = ItemView.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  ItemView.prototype.tagName = 'div';

  ItemView.prototype.className = 'item';

  ItemView.prototype.template = _.template($.id('item-template').innerHTML);

  ItemView.prototype.events = {
    'click': 'select'
  };

  ItemView.prototype.initialize = function() {
    console.log('##', this.model.get('name'));
    console.log('> Creating new ItemView');
    _.bindAll(this);
    this.model.bind('update', this.render);
    return this.model.bind('change:active', this.setActive);
  };

  ItemView.prototype.render = function() {
    console.log('> Rendering item');
    this.el.innerHTML = this.template(this.model.toJSON());
    return this.el;
  };

  ItemView.prototype.select = function() {
    var pos;

    pos = this.model.collection.indexOf(this.model);
    return this.model.collection.setActive(pos);
  };

  ItemView.prototype.setActive = function(state) {
    $.toggleClass(this.el, 'active', state);
    return this.model.collection.trigger('select:item');
  };

  return ItemView;

})(Backbone.View);

PaneView = (function(_super) {
  __extends(PaneView, _super);

  function PaneView() {
    _ref5 = PaneView.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  PaneView.prototype.tagName = 'section';

  PaneView.prototype.className = 'pane';

  PaneView.prototype.template = _.template($.id('pane-template').innerHTML);

  PaneView.prototype.initialize = function() {
    var items;

    console.log('#', this.model.get('title'));
    console.log('> Creating a new PaneView');
    _.bindAll(this);
    items = this.model.get('items');
    items.bind('add', this.appendItem);
    if (items.length > 0) {
      return items.setActive(0);
    }
  };

  PaneView.prototype.render = function() {
    var _this = this;

    console.log('> Rendering pane view');
    this.el.innerHTML = this.template(this.model.toJSON());
    this.model.get('items').forEach(function(item) {
      return _this.appendItem(item);
    });
    return this.el;
  };

  PaneView.prototype.appendItem = function(item) {
    var itemView;

    itemView = new ItemView({
      model: item
    });
    return this.$el.append(itemView.render());
  };

  return PaneView;

})(Backbone.View);

Ranger = (function(_super) {
  __extends(Ranger, _super);

  function Ranger() {
    _ref6 = Ranger.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  Ranger.prototype.el = $["class"]('ranger')[0];

  Ranger.prototype.initialize = function() {
    _.bindAll(this);
    this.panes = new Panes();
    return this.panes.bind('add', this.addPane);
  };

  Ranger.prototype.addPane = function(pane) {
    var paneView;

    paneView = new PaneView({
      model: pane
    });
    return this.$el.append(paneView.render());
  };

  return Ranger;

})(Backbone.View);

window.ranger = new Ranger;

ranger.panes.add({
  title: 'Artists',
  items: [
    {
      name: 'Coldplay',
      pane: {
        title: 'Albums',
        items: [
          {
            name: 'Mylo Xyloto',
            pane: {
              title: 'Songs',
              items: [
                {
                  name: 'Hurts Like Heaven'
                }, {
                  name: 'Paradise'
                }, {
                  name: 'Charlie Brown'
                }, {
                  name: 'Us Against The Wind'
                }
              ]
            }
          }, {
            name: 'Viva la Vida',
            pane: {
              title: 'Songs',
              items: [
                {
                  name: 'Life in Technicolor'
                }, {
                  name: 'Cemeteries of London'
                }, {
                  name: 'Lost!'
                }, {
                  name: 'Lovers in Japan'
                }
              ]
            }
          }, {
            name: 'A Rush of Blood to the Head',
            pane: {
              title: 'Songs',
              items: [
                {
                  name: 'Polotik'
                }, {
                  name: 'In My Place'
                }, {
                  name: 'God Put a Smile upon Your Face'
                }, {
                  name: 'Clocks'
                }
              ]
            }
          }, {
            name: 'X&Y',
            pane: {
              title: 'Songs',
              items: [
                {
                  name: 'Square One'
                }, {
                  name: 'What If'
                }, {
                  name: 'White Shadows'
                }, {
                  name: 'Fix You'
                }
              ]
            }
          }
        ]
      }
    }, {
      name: 'A2',
      pane: {
        title: 'Albums',
        items: [
          {
            name: 'A2 B1'
          }, {
            name: 'A2 B2'
          }, {
            name: 'A2 B3'
          }, {
            name: 'A2 B4'
          }
        ]
      }
    }
  ]
});
