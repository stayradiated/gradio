// Generated by CoffeeScript 1.6.2
/**
 * @fileOverview Scrapes the GrooveShark homepage HTML to get the Country ID.
*
*/


(function() {
  var Country, http, promise,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http');

  promise = require('when');

  /**
   * @class Country
  *
  */


  Country = (function() {
    function Country(core) {
      this.core = core;
      this.fetch = __bind(this.fetch, this);
      this.getHtml = __bind(this.getHtml, this);
      this.json = null;
    }

    Country.prototype.getHtml = function() {
      var body, deferred, options, req;

      deferred = promise.defer();
      options = {
        hostname: this.core.domain,
        path: '/',
        method: 'GET',
        headers: {
          'Accept': 'text/html',
          'Referer': this.core.htmlReferer,
          'User-Agent': this.core.userAgent
        }
      };
      body = '';
      req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          return deferred.resolve(body);
        });
      });
      req.on('error', function(err) {
        return deferred.reject(err);
      });
      req.end();
      return deferred.promise;
    };

    Country.prototype.fetch = function(force) {
      var deferred,
        _this = this;

      if (force == null) {
        force = false;
      }
      deferred = promise.defer();
      if ((this.json != null) && !force) {
        deferred.resolve(this.json);
        return deferred.promise;
      }
      this.getHtml().then(function(html) {
        var raw, regex;

        regex = /"country":(\{[A-Z0-9":,]+\})/;
        raw = html.match(regex)[1];
        return _this.json = JSON.parse(raw);
      }).otherwise(function() {
        console.warn('Warning: Could not get country ID');
        return _this.json = {
          ID: 1,
          CC1: 0,
          CC2: 0,
          CC3: 0,
          CC4: 0,
          DMA: 0,
          IPR: 0
        };
      }).always(function() {
        return deferred.resolve(_this.json);
      });
      return deferred.promise;
    };

    return Country;

  })();

  module.exports = Country;

}).call(this);
