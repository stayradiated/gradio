// Generated by CoffeeScript 1.6.2
(function() {
  var Groovy, promise, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  promise = require('when');

  Groovy = (function() {
    /**
     * @params {Core} core - Instance of Core class
    *
    */
    function Groovy(core) {
      this.core = core;
      this.getSongStream = __bind(this.getSongStream, this);
    }

    /**
     * Returns the results of a search from the result of calling Grooveshark's
     * method getSearchResultsEx
     * @param {string} query - Words to search
     * @param {string} type - The type of result you want (Songs, Artists, Albums, Playlists...)
     * @return {object} Json object will all info of the response
    */


    Groovy.prototype.getSearchResults = function(query, type) {
      var parameters;

      parameters = {
        query: query,
        type: type,
        guts: 0,
        ppOveride: false
      };
      return this.core.callMethod(parameters, 'getResultsFromSearch');
    };

    /**
     * Returns the songs of the artist given its ID
     * @param {string} artistId - The ID of the artist
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info of the response
    */


    Groovy.prototype.getArtistsSongs = function(artistId, offset, isVerified) {
      var parameters;

      parameters = {
        offset: offset,
        artistID: artistId,
        isVerified: isVerified
      };
      return this.core.callMethod(parameters, 'artistGetSongs');
    };

    /**
     * Returns the songs of the album given its ID
     * @param {string} albumId - ID of the album
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info the response
    */


    Groovy.prototype.getAlbumSongs = function(albumId, offset, isVerified) {
      var parameters;

      parameters = {
        offset: offset,
        albumID: albumId,
        isVerified: isVerified
      };
      return this.core.callMethod(parameters, 'albumGetSongs');
    };

    /**
     * Returns the songs of the playlist given its ID
     * @param {string} playlistId - ID of the playlist
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info the response
    */


    Groovy.prototype.getPlaylistSongs = function(listId, offset, isVerified) {
      var parameters;

      if (offset == null) {
        offset = 0;
      }
      if (isVerified == null) {
        isVerified = false;
      }
      parameters = {
        offset: offset,
        playlistID: listId,
        isVerified: isVerified
      };
      return this.core.callMethod(parameters, 'playlistGetSongs');
    };

    Groovy.prototype.userGetSongsInLibrary = function(userId, page) {};

    /**
     * Get the users favorites
     * @param {string} userId - The users ID
     * @param {string} ofWhat='Songs' - What you want to get the favorites for (songs, artists)
     * @promises {object} Array of song data
    */


    Groovy.prototype.getFavorites = function(userId, ofWhat) {
      var parameters;

      if (ofWhat == null) {
        ofWhat = 'Songs';
      }
      parameters = {
        userID: userId,
        ofWhat: ofWhat
      };
      return this.core.callMethod(parameters, 'getFavorites');
    };

    /**
     * Returns a list of popular songs
     * @param {string} type - 'monthly', 'weekly' or 'daily'
     * @promises {object} Array of song data
    */


    Groovy.prototype.getPopularSongs = function(type) {
      var parameters;

      if (type == null) {
        type = 'daily';
      }
      parameters = {
        type: type
      };
      return this.core.callMethod(parameters, 'popularGetSongs');
    };

    /**
     * Must be called before retrieving a stream to avoid Grooveshark
     * blacklisting your IP. All the needed params are given by getSongURL
     * @param {string} ip - The IP of the server
     * @param {string} streamKey - The StreamKey for the song
     * @param {int} songId - the ID of the song
     * @promises {boolean} Should return {result: true}
    */


    Groovy.prototype.markSongAsDownloaded = function(ip, streamKey, songId) {
      var parameters;

      parameters = {
        streamServerID: ip,
        streamKey: streamKey,
        songID: songId
      };
      return this.core.callMethod(parameters, 'markSongDownloadedEx');
    };

    /**
     * Must be called once the stream has finished to avoid Grooveshark
     * blacklisting your IP. All the needed params are given by getSongURL
     * @param {string} ip - The IP of the server
     * @param {string} streamKey - The StreamKey for the song
     * @param {int} songId - the ID of the song
     * @promises {null} Should return {result: null}
    */


    Groovy.prototype.markSongComplete = function(ip, streamKey, songId) {
      var parameters;

      parameters = {
        streamServerID: ip,
        streamKey: streamKey,
        songID: songId
      };
      return this.core.callMethod(parameters, 'markSongComplete');
    };

    Groovy.prototype.authenticateUser = function(username, password) {};

    Groovy.prototype.initiateQueue = function() {};

    Groovy.prototype.createPlaylist = function(playlistName, playlistAbout, ids) {};

    Groovy.prototype.playlistAddSongToExisting = function(playlistId, songId) {};

    Groovy.prototype.userAddSongsToLibrary = function(songId, songName, albumId, albumName, artistId, artistName, artFilename, trackNum) {};

    Groovy.prototype.favorite = function(songId, songName, albumId, albumName, artistId, artistName, artFilename, trackNum) {};

    Groovy.prototype.userGetPlaylists = function(userId) {};

    Groovy.prototype.getCountry = function() {};

    /**
     * Returns info about where to get the song stream
     * @param {int} songId - The ID of the song
     * @promises {object} cotains streamKey and server IP
    */


    Groovy.prototype.getSongUrl = function(songId) {
      var parameters;

      parameters = {
        country: {
          CC1: 0,
          CC2: 0,
          CC3: 137438953472,
          CC4: 0,
          DMA: 0,
          ID: 166,
          IPR: 0
        },
        songID: songId,
        prefetch: false,
        mobile: false,
        type: 128
      };
      return this.core.callMethod(parameters, 'getStreamKeyFromSongIDEx');
    };

    /**
     * Download a song. Handles everything, including getting the Stream Key,
     * and calling MarkSongAsDownloaded and MarkSongComplete.
     * @param {int} songId - The ID of the Song
     * @return {stream} Audio stream of the song
    */


    Groovy.prototype.getSongStream = function(songId) {
      var deferred, ip, streamKey,
        _this = this;

      deferred = promise.defer();
      ip = null;
      streamKey = null;
      this.getSongUrl(songId).then(function(response) {
        ip = response.result.ip;
        streamKey = response.result.streamKey;
        _this.markSongAsDownloaded(ip, streamKey, songId);
        return _this.core.getSongStream(ip, streamKey);
      }).then(function(fileData) {
        deferred.response(fileData);
        return _this.markSongComplete(ip, streamKey, songId);
      }, null, deferred.notify);
      return deferred.promise;
    };

    return Groovy;

  })();

  module.exports = Groovy;

}).call(this);
