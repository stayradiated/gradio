// Generated by CoffeeScript 1.6.2
(function() {
  var App, fs, http, promise, request;

  App = require('./core');

  request = require('request');

  http = require('http');

  promise = require('when');

  fs = require('fs');

  module.exports = {
    /**
     * Returns the results of a search from the result of calling Grooveshark's
     * method getSearchResultsEx
     * @param {string} query - Words to search
     * @param {string} type - The type of result you want (Songs, Artists, Albums, Playlists...)
     * @return {object} Json object will all info of the response
    */

    getSearchResults: function(query, type) {
      var parameters;

      parameters = {
        query: query,
        type: type,
        guts: 0,
        ppOveride: false
      };
      return App.callMethod(parameters, 'getResultsFromSearch');
    },
    /**
     * Returns the songs of the artist given its ID
     * @param {string} artistId - The ID of the artist
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info of the response
    */

    getArtistsSongs: function(artistId, offset, isVerified) {
      var parameters;

      parameters = {
        offset: offset,
        artistID: artistId,
        isVerified: isVerified
      };
      return App.callMethod(parameters, 'artistGetSongs');
    },
    /**
     * Returns the songs of the album given its ID
     * @param {string} albumId - ID of the album
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info the response
    */

    getAlbumSongs: function(albumId, offset, isVerified) {
      var parameters;

      parameters = {
        offset: offset,
        albumID: albumId,
        isVerified: isVerified
      };
      return App.callMethod(parameters, 'albumGetSongs');
    },
    /**
     * Returns the songs of the playlist given its ID
     * @param {string} playlistId - ID of the playlist
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info the response
    */

    getPlaylistSongs: function(listId, offset, isVerified) {
      var parameters;

      if (offset == null) {
        offset = 0;
      }
      if (isVerified == null) {
        isVerified = false;
      }
      parameters = {
        offset: offset,
        playlistID: listId,
        isVerified: isVerified
      };
      return App.callMethod(parameters, 'playlistGetSongs');
    },
    userGetSongsInLibrary: function(userId, page) {},
    /**
     * Get the users favorites
     * @param {string} userId - The users ID
     * @param {string} ofWhat='Songs' - What you want to get the favorites for (songs, artists)
     * @promises {object} Array of song data
    */

    getFavorites: function(userId, ofWhat) {
      var parameters;

      if (ofWhat == null) {
        ofWhat = 'Songs';
      }
      parameters = {
        userID: userId,
        ofWhat: ofWhat
      };
      return App.callMethod(parameters, 'getFavorites');
    },
    /**
     * Returns a list of popular songs
     * @param {string} type - 'monthly', 'weekly' or 'daily'
     * @promises {object} Array of song data
    */

    getPopularSongs: function(type) {
      var parameters;

      if (type == null) {
        type = 'daily';
      }
      parameters = {
        type: type
      };
      return App.callMethod(parameters, 'popularGetSongs');
    },
    /**
     * Must be called before retrieving a stream to avoid Grooveshark
     * blacklisting your IP. All the needed params are given by getSongURL
     * @param {string} ip - The IP of the server
     * @param {string} streamKey - The StreamKey for the song
     * @param {int} songId - the ID of the song
     * @promises {boolean} Should return {result: true}
    */

    markSongAsDownloaded: function(ip, streamKey, songId) {
      var parameters;

      parameters = {
        streamServerID: ip,
        streamKey: streamKey,
        songID: songId
      };
      return App.callMethod(parameters, 'markSongDownloadedEx');
    },
    /**
     * Must be called once the stream has finished to avoid Grooveshark
     * blacklisting your IP. All the needed params are given by getSongURL
     * @param {string} ip - The IP of the server
     * @param {string} streamKey - The StreamKey for the song
     * @param {int} songId - the ID of the song
     * @promises {null} Should return {result: null}
    */

    markSongComplete: function(ip, streamKey, songId) {
      var parameters;

      parameters = {
        streamServerID: ip,
        streamKey: streamKey,
        songID: songId
      };
      console.log(parameters);
      return App.callMethod(parameters, 'markSongComplete');
    },
    authenticateUser: function(username, password) {},
    initiateQueue: function() {},
    createPlaylist: function(playlistName, playlistAbout, ids) {},
    playlistAddSongToExisting: function(playlistId, songId) {},
    userAddSongsToLibrary: function(songId, songName, albumId, albumName, artistId, artistName, artFilename, trackNum) {},
    favorite: function(songId, songName, albumId, albumName, artistId, artistName, artFilename, trackNum) {},
    userGetPlaylists: function(userId) {},
    getCountry: function() {},
    /**
     * Returns info about where to get the song stream
     * @param {int} songId - The ID of the song
     * @promises {object} cotains streamKey and server IP
    */

    getSongURL: function(songId) {
      var parameters;

      parameters = {
        country: {
          CC1: 0,
          CC2: 0,
          CC3: 137438953472,
          CC4: 0,
          DMA: 0,
          ID: 166,
          IPR: 0
        },
        songID: songId,
        prefetch: false,
        mobile: false,
        type: 128
      };
      return App.callMethod(parameters, 'getStreamKeyFromSongIDEx');
    },
    /**
     * Returns the song audio stream corresponded to the streamKey passed, it
     * can be used to store it on disk or play it.
     * IMPORTANT!: When using this method markSongAsDownloaded and
     * markSongComplete should be used to avoid Grooveshark heuristics to detect
     * this as an attack.
     * @param {string} ip - The IP of the host where the song is stored
     * @param {string} streamKey - The StreamKey identifies the song
     * @return {stream} Audio stream of the song
    */

    getSongStream: function(ip, streamKey) {
      var contents, deferred, options, req;

      deferred = promise.defer();
      contents = 'streamKey=' + streamKey.replace(/_/g, '%5F');
      options = {
        hostname: ip,
        path: '/' + App.streamphp,
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': contents.length,
          'Referer': 'http://' + App.domain + '/JSQueue.swf?' + App.versionSwf
        }
      };
      req = http.request(options, function(res) {
        var body, length, notify, progress;

        length = parseInt(res.headers['content-length'], 10);
        progress = 0;
        notify = function() {
          var now;

          now = Math.floor(body.length / length * 100);
          if (now > progress) {
            progress = now;
            return deferred.notify(progress);
          }
        };
        body = "";
        res.on('data', function(chunk) {
          body += chunk.toString('binary');
          return notify();
        });
        return res.on('end', function() {
          return deferred.resolve(body);
        });
      });
      req.write(contents);
      req.on('error', function(e) {
        return console.log('error', e.message);
      });
      req.end();
      return deferred.promise;
    }
  };

}).call(this);
