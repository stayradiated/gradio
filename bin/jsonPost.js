// Generated by CoffeeScript 1.6.2
/**
 * @fileoverview Generates the POST headers used for talking to GrooveShark.
*/


(function() {
  var JsonPost, Token, promise,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Token = require('./token');

  promise = require('when');

  /**
   * @class JsonPost
  */


  JsonPost = (function() {
    /**
     * Returns the POST data for a http request to GrooveShark
     * @params {Core} core - An instance of the Core class
     * @params {object} parameters - An object with the parameters you want to send
     * @params {string} method - The service to use
     * @promises {object} The data to send to GrooveShark's APIs
    */
    function JsonPost(core, parameters, method) {
      var deferred, sessionID,
        _this = this;

      this.parameters = parameters;
      this.method = method;
      this.toString = __bind(this.toString, this);
      deferred = promise.defer();
      sessionID = null;
      core.getSessionID().then(function(id) {
        sessionID = id;
        return core.country.fetch();
      }).then(function(country) {
        var _ref, _ref1;

        _this.header = {
          uuid: core.uuid,
          privacy: 0,
          session: sessionID,
          country: country
        };
        if (_ref = _this.method, __indexOf.call(core.jsMethod, _ref) >= 0) {
          _this.header.client = core.jsName;
          _this.header.clientRevision = Token.jsVersion;
          _this.referer = core.jsReferer;
        } else if (_ref1 = _this.method, __indexOf.call(core.htmlMethod, _ref1) >= 0) {
          _this.header.client = core.htmlName;
          _this.header.clientRevision = Token.htmlVersion;
          _this.referer = core.htmlReferer;
        }
        return deferred.resolve(_this);
      });
      return deferred.promise;
    }

    JsonPost.prototype.toString = function() {
      var json;

      json = {
        header: this.header,
        parameters: this.parameters,
        method: this.method
      };
      return JSON.stringify(json);
    };

    return JsonPost;

  })();

  module.exports = JsonPost;

}).call(this);
