// Generated by CoffeeScript 1.6.2
(function() {
  var Methods, promise, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  promise = require('when');

  Methods = (function() {
    /**
     * @params {Core} core - Instance of Core class
    *
    */
    function Methods(core) {
      this.core = core;
      this.getSongStream = __bind(this.getSongStream, this);
    }

    /**
     * Returns the results of a search from the result of calling Grooveshark's
     * method getSearchResultsEx
     * @param {string} query - Words to search
     * @param {string} type - The type of result you want (Songs, Artists, Albums, Playlists, Users, Events...)
     * @return {object} Json object will all info of the response
    */


    Methods.prototype.getSearchResults = function(query, type) {
      var parameters;

      parameters = {
        query: query,
        type: type,
        guts: 0,
        ppOveride: false
      };
      return this.core.callMethod(parameters, 'getResultsFromSearch');
    };

    /**
     * Returns the songs of the artist given its ID
     * @param {string} artistID - The ID of the artist
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info of the response
    */


    Methods.prototype.getArtistsSongs = function(artistID, offset, isVerified) {
      var parameters;

      parameters = {
        offset: offset,
        artistID: artistID,
        isVerified: isVerified
      };
      return this.core.callMethod(parameters, 'artistGetSongs');
    };

    /**
     * Returns the songs of the album given its ID
     * @param {string} albumID - ID of the album
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info the response
    */


    Methods.prototype.getAlbumSongs = function(albumID, offset, isVerified) {
      var parameters;

      parameters = {
        offset: offset,
        albumID: albumID,
        isVerified: isVerified
      };
      return this.core.callMethod(parameters, 'albumGetSongs');
    };

    /**
     * Returns the songs of the playlist given its ID
     * @param {string} listID - ID of the playlist
     * @param {int} offset - Displacement of the songs (Starting song)
     * @param {boolean} isVerified - Songs verified or not
     * @return {object} Json object with all info the response
    */


    Methods.prototype.getPlaylistSongs = function(listID, offset, isVerified) {
      var parameters;

      if (offset == null) {
        offset = 0;
      }
      if (isVerified == null) {
        isVerified = false;
      }
      parameters = {
        offset: offset,
        playlistID: listID,
        isVerified: isVerified
      };
      return this.core.callMethod(parameters, 'playlistGetSongs');
    };

    Methods.prototype.userGetSongsInLibrary = function(userID, page) {};

    /**
     * Get the users favorites
     * @param {string} userID - The users ID
     * @param {string} ofWhat='Songs' - What you want to get the favorites for (songs, artists)
     * @promises {object} Array of song data
    */


    Methods.prototype.getFavorites = function(userID, ofWhat) {
      var parameters;

      if (ofWhat == null) {
        ofWhat = 'Songs';
      }
      parameters = {
        userID: userID,
        ofWhat: ofWhat
      };
      return this.core.callMethod(parameters, 'getFavorites');
    };

    /**
     * Returns a list of popular songs
     * @param {string} type - 'monthly', 'weekly' or 'daily'
     * @promises {object} Array of song data
    */


    Methods.prototype.getPopularSongs = function(type) {
      var parameters;

      if (type == null) {
        type = 'daily';
      }
      parameters = {
        type: type
      };
      return this.core.callMethod(parameters, 'popularGetSongs');
    };

    /**
     * Must be called before retrieving a stream to avoid Grooveshark
     * blacklisting your IP. All the needed params are given by getSongURL
     * @param {string} ip - The IP of the server
     * @param {string} streamKey - The StreamKey for the song
     * @param {int} songID - the ID of the song
     * @promises {boolean} Should return {result: true}
    */


    Methods.prototype.markSongAsDownloaded = function(ip, streamKey, songID) {
      var parameters;

      parameters = {
        streamServerID: ip,
        streamKey: streamKey,
        songID: songID
      };
      return this.core.callMethod(parameters, 'markSongDownloadedEx');
    };

    /**
     * Must be called once the stream has finished to avoid Grooveshark
     * blacklisting your IP. All the needed params are given by getSongURL
     * @param {string} ip - The IP of the server
     * @param {string} streamKey - The StreamKey for the song
     * @param {int} songID - the ID of the song
     * @promises {null} Should return {result: null}
    */


    Methods.prototype.markSongComplete = function(ip, streamKey, songID) {
      var parameters;

      parameters = {
        streamServerID: ip,
        streamKey: streamKey,
        songID: songID
      };
      return this.core.callMethod(parameters, 'markSongComplete');
    };

    /**
      * Log the user into GrooveShark
      * TODO: Test this and see if it still works
      * @params {string} username - The username
      * @params {string} password - The password
      * @promises {object} Some data in a JSON object
    *
    */


    Methods.prototype.authenticateUser = function(username, password) {
      var parameters;

      parameters = {
        username: username,
        password: password,
        savePassword: 1
      };
      return this.core.callMethod(parameters, 'authenticateUser', 'https');
    };

    Methods.prototype.logoutUser = function() {
      var parameters;

      parameters = {};
      return this.core.callMethod(parameters, 'logoutUser');
    };

    /**
     * I don't think this is used...
     * I imagine it would start the queue
    *
    */


    Methods.prototype.initiateQueue = function() {
      var parameters;

      parameters = {};
      return this.core.callMethod(parameters, 'initiateQueue');
    };

    /**
     * Create a playlist.
     * I assume the user must be logged in for it to work.
     * Haven't tested it though.
     * @params {string} playlistName - The name of the playlist
     * @params {string} playlistAbout - The description
     * @params {array} ids - An array of song IDs to put in the playlist. Can be empty.
    *
    */


    Methods.prototype.createPlaylist = function(playlistName, playlistAbout, ids) {
      var parameters;

      parameters = {
        playlistName: playlistName,
        playlistAbout: playlistAbout,
        songIDs: ids
      };
      return this.core.callMethod(parameters, 'createPlaylist');
    };

    /**
     * Add a song to a playlist.
     * @params {int} listID - The ID of the playlist to add a song to
     * @params {int} songID - The id of the song you want to add
    *
    */


    Methods.prototype.playlistAddSongToExisting = function(listID, songID) {
      var parameters;

      parameters = {
        playlistID: listID,
        songID: songID
      };
      return this.core.callMethod(parameters, 'playlistAddSongToExisting');
    };

    /**
     * Add a song to the users library collection
    *
    */


    Methods.prototype.userAddSongsToLibrary = function(songID, songName, albumID, albumName, artistID, artistName, artFilename, trackNum) {
      var parameters, songs;

      songs = {
        songID: songID,
        songName: songName,
        albumID: albumID,
        albumName: albumName,
        artistID: artistID,
        artistName: artistName,
        artFilename: artFilename,
        track: trackNum
      };
      parameters = {
        songs: songs
      };
      return this.core.callMethod(parameters, 'userAddSongsToLibrary');
    };

    /**
     * Add a song to the users favorites
    *
    */


    Methods.prototype.favorite = function(songID, songName, albumID, albumName, artistID, artistName, artFilename, trackNum) {
      var details, parameters;

      details = {
        songID: songID,
        songName: songName,
        albumID: albumID,
        albumName: albumName,
        artistID: artistID,
        artistName: artistName,
        artFilename: artFilename,
        track: trackNum
      };
      parameters = {
        what: 'Song',
        ID: songID,
        details: details
      };
      return this.core.callMethod(parameters, 'favorite');
    };

    /**
      * Fetch a users playlists
      * @params {int} userID - The ID of the user
    *
    */


    Methods.prototype.userGetPlaylists = function(userID) {
      var parameters;

      parameters = {
        userID: userID
      };
      return this.core.callMethod(parameters, 'userGetPlaylists');
    };

    /**
     * Returns info about where to get the song stream
     * @param {int} songID - The ID of the song
     * @promises {object} cotains streamKey and server IP
    */


    Methods.prototype.getSongUrl = function(songID) {
      var deferred;

      deferred = promise.defer();
      this.core.country.fetch().then(function(country) {
        var parameters;

        parameters = {
          country: country,
          songID: songID,
          prefetch: false,
          mobile: false,
          type: 128
        };
        return this.core.callMethod(parameters, 'getStreamKeyFromSongIDEx');
      }).then(deferred.resolve, deferred.reject, deferred.notify);
      return deferred.promise;
    };

    /**
     * Download a song. Handles everything, including getting the Stream Key,
     * and calling MarkSongAsDownloaded and MarkSongComplete.
     * @param {int} songID - The ID of the Song
     * @return {stream} Audio stream of the song
    */


    Methods.prototype.getSongStream = function(songID) {
      var deferred, ip, streamKey,
        _this = this;

      deferred = promise.defer();
      ip = null;
      streamKey = null;
      this.getSongUrl(songID).then(function(response) {
        ip = response.result.ip;
        streamKey = response.result.streamKey;
        _this.markSongAsDownloaded(ip, streamKey, songID);
        return _this.core.getSongStream(ip, streamKey);
      }).then(function(fileData) {
        deferred.response(fileData);
        return _this.markSongComplete(ip, streamKey, songID);
      }, null, deferred.notify);
      return deferred.promise;
    };

    return Methods;

  })();

  module.exports = Methods;

}).call(this);
