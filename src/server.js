// Generated by CoffeeScript 1.6.2
/**
 * Starts a web server
 * It's primary purpose is to stream audio data to the client
*/

var Methods, Server, fs, http, url,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

http = require('http');

url = require('url');

fs = require('fs');

Methods = require('./methods');

Server = (function() {
  Server.prototype.events = {
    'fetchSong': /\/song\/([\w\W]+)\.mp3$/
  };

  function Server(core) {
    var _this = this;

    this.core = core;
    this.fetchSong = __bind(this.fetchSong, this);
    this.listen = __bind(this.listen, this);
    this.app = new Methods(this.core);
    this.server = http.createServer(function(req, res) {
      var match, method, missing, regex, uri, _ref;

      uri = url.parse(req.url).pathname;
      missing = true;
      _ref = _this.events;
      for (method in _ref) {
        regex = _ref[method];
        match = uri.match(regex);
        if (match != null) {
          missing = false;
          _this[method](req, res, match);
        }
      }
      if (missing) {
        res.writeHead(404, {
          'Content-Type': 'text/plain'
        });
        res.write('404. Page not found.');
        return res.end();
      }
    });
  }

  Server.prototype.listen = function(port) {
    return this.server.listen(port);
  };

  Server.prototype.fetchSong = function(req, res, match) {
    var headers, path, songID,
      _this = this;

    songID = decodeURIComponent(match[1]);
    path = "./cache/" + songID + ".mp3";
    if (req.headers['if-modified-since'] != null) {
      console.log('> got an if-modified-since');
      headers = {
        'Date': new Date().toGMTString(),
        'Server': 'Apache/2.2.22 (Ubuntu)',
        'Connection': 'Keep-Alive',
        'Keep-Alive': 'timeout=5, max=100',
        'ETag': '"grooveshark"'
      };
      res.writeHead(304, headers);
      res.end();
      return;
    }
    return fs.exists(path, function(exists) {
      console.log(path, exists);
      if (exists) {
        console.log('> Loading from disk');
        return fs.readFile(path, function(err, file) {
          var bytes, chunk, end, ini, range, total;

          range = req.headers.range;
          if (range == null) {
            console.log('> no range');
            res.writeHead(200, {
              'Content-Type': 'audio/mpeg'
            });
            res.end(file);
            return;
          }
          console.log('> Normal transfer');
          bytes = range.match(/bytes=(\d+)-(\d+)?/);
          ini = parseInt(bytes[1], 10);
          end = parseInt(bytes[2], 10);
          if (isNaN(end)) {
            end = file.length - 1;
          }
          total = file.length;
          chunk = end - ini + 1;
          headers = {
            'Date': new Date().toGMTString(),
            'Server': 'Apache/2.2.22 (Ubuntu)',
            'Last-Modified': new Date('5/10/2013').toGMTString(),
            'ETag': '"grooveshark"',
            'Accept-Ranges': 'bytes',
            'Content-Length': chunk,
            'Content-Range': "bytes " + ini + "-" + end + "/" + total,
            'Keep-Alive': 'timeout=5, max=100',
            'Connection': 'Keep-Alive',
            'Content-Type': 'audio/mpeg'
          };
          res.writeHead(206, headers);
          return res.end(file);
        });
      } else {
        return _this.app.getSongStream(songID).then(function(stream) {
          var current, file, last, total;

          file = fs.createWriteStream(path);
          total = stream.headers['content-length'];
          current = 0;
          last = 0;
          delete stream.headers['cache-control'];
          res.writeHead(200, stream.headers);
          stream.on('data', function(chunk) {
            var now;

            file.write(chunk);
            res.write(chunk);
            current += chunk.length;
            now = Math.round(current / total * 100);
            if (now > last) {
              last = now;
              return console.log(now);
            }
          });
          return stream.on('end', function() {
            console.log('finished');
            file.end();
            return res.end();
          });
        });
      }
    });
  };

  return Server;

})();

module.exports = Server;
